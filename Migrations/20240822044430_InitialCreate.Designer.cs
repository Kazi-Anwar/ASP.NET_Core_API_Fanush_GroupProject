// <auto-generated />
using System;
using Fanush.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fanush.Migrations
{
    [DbContext(typeof(FanushDbContext))]
    [Migration("20240822044430_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fanush.Entities.Administrator.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Fanush.Entities.PayrollManagement.PayrollCalculation", b =>
                {
                    b.Property<int>("PayrollCalcuationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayrollCalcuationId"));

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ConveyanceAllowence")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("HouseRent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MedicalAllowence")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtherAllowence")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PayrollCalcuationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PayrollCalculations");

                    b.HasData(
                        new
                        {
                            PayrollCalcuationId = 1,
                            BasicSalary = 50000m,
                            ConveyanceAllowence = 3000m,
                            EmployeeId = 1,
                            HouseRent = 10000m,
                            MedicalAllowence = 5000m,
                            OtherAllowence = 2000m
                        },
                        new
                        {
                            PayrollCalcuationId = 2,
                            BasicSalary = 45000m,
                            ConveyanceAllowence = 2500m,
                            EmployeeId = 2,
                            HouseRent = 9000m,
                            MedicalAllowence = 4500m,
                            OtherAllowence = 1500m
                        },
                        new
                        {
                            PayrollCalcuationId = 3,
                            BasicSalary = 47000m,
                            ConveyanceAllowence = 2700m,
                            EmployeeId = 3,
                            HouseRent = 9400m,
                            MedicalAllowence = 4700m,
                            OtherAllowence = 1700m
                        },
                        new
                        {
                            PayrollCalcuationId = 4,
                            BasicSalary = 55000m,
                            ConveyanceAllowence = 3500m,
                            EmployeeId = 4,
                            HouseRent = 11000m,
                            MedicalAllowence = 5500m,
                            OtherAllowence = 2500m
                        },
                        new
                        {
                            PayrollCalcuationId = 5,
                            BasicSalary = 48000m,
                            ConveyanceAllowence = 2800m,
                            EmployeeId = 5,
                            HouseRent = 9600m,
                            MedicalAllowence = 4800m,
                            OtherAllowence = 1800m
                        },
                        new
                        {
                            PayrollCalcuationId = 6,
                            BasicSalary = 51000m,
                            ConveyanceAllowence = 3100m,
                            EmployeeId = 6,
                            HouseRent = 10200m,
                            MedicalAllowence = 5100m,
                            OtherAllowence = 2100m
                        },
                        new
                        {
                            PayrollCalcuationId = 7,
                            BasicSalary = 49000m,
                            ConveyanceAllowence = 2900m,
                            EmployeeId = 7,
                            HouseRent = 9800m,
                            MedicalAllowence = 4900m,
                            OtherAllowence = 1900m
                        },
                        new
                        {
                            PayrollCalcuationId = 8,
                            BasicSalary = 53000m,
                            ConveyanceAllowence = 3300m,
                            EmployeeId = 8,
                            HouseRent = 10600m,
                            MedicalAllowence = 5300m,
                            OtherAllowence = 2300m
                        },
                        new
                        {
                            PayrollCalcuationId = 9,
                            BasicSalary = 56000m,
                            ConveyanceAllowence = 3600m,
                            EmployeeId = 9,
                            HouseRent = 11200m,
                            MedicalAllowence = 5600m,
                            OtherAllowence = 2600m
                        },
                        new
                        {
                            PayrollCalcuationId = 10,
                            BasicSalary = 46000m,
                            ConveyanceAllowence = 2600m,
                            EmployeeId = 10,
                            HouseRent = 9200m,
                            MedicalAllowence = 4600m,
                            OtherAllowence = 1600m
                        });
                });

            modelBuilder.Entity("Fanush.Entities.PerformenceManagement.DevelopmentPlan", b =>
                {
                    b.Property<int>("DevelopmentPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DevelopmentPlanId"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DevelopmentPlanStatus")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<string>("Resources")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TargetCompletionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DevelopmentPlanId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("DevelopmentPlans");

                    b.HasData(
                        new
                        {
                            DevelopmentPlanId = 1,
                            Description = "Improve communication skills.",
                            DevelopmentPlanStatus = 1,
                            EmployeeId = 1,
                            Feedback = "Needs more practice in public speaking.",
                            IsActive = true,
                            Progress = 20,
                            Resources = "Online communication course, public speaking workshops.",
                            TargetCompletionDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DevelopmentPlanId = 2,
                            Description = "Gain advanced skills in C#.",
                            DevelopmentPlanStatus = 0,
                            EmployeeId = 2,
                            Feedback = "Excellent progress so far.",
                            IsActive = true,
                            Progress = 40,
                            Resources = "Advanced C# course, mentorship.",
                            TargetCompletionDate = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DevelopmentPlanId = 3,
                            Description = "Enhance project management skills.",
                            DevelopmentPlanStatus = 1,
                            EmployeeId = 3,
                            Feedback = "Needs more focus on risk management.",
                            IsActive = true,
                            Progress = 30,
                            Resources = "PMI certification course, project simulations.",
                            TargetCompletionDate = new DateTime(2024, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DevelopmentPlanId = 4,
                            Description = "Improve time management.",
                            DevelopmentPlanStatus = 2,
                            EmployeeId = 4,
                            Feedback = "Plan rejected due to insufficient details.",
                            IsActive = false,
                            Progress = 10,
                            Resources = "Time management workshops, books.",
                            TargetCompletionDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DevelopmentPlanId = 5,
                            Description = "Develop leadership skills.",
                            DevelopmentPlanStatus = 1,
                            EmployeeId = 5,
                            Feedback = "Showing promise, continue with current plan.",
                            IsActive = true,
                            Progress = 50,
                            Resources = "Leadership seminars, mentoring.",
                            TargetCompletionDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DevelopmentPlanId = 6,
                            Description = "Learn new database management techniques.",
                            DevelopmentPlanStatus = 0,
                            EmployeeId = 6,
                            Feedback = "Great progress in database design.",
                            IsActive = true,
                            Progress = 60,
                            Resources = "SQL workshops, advanced database books.",
                            TargetCompletionDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DevelopmentPlanId = 7,
                            Description = "Master cloud computing.",
                            DevelopmentPlanStatus = 0,
                            EmployeeId = 7,
                            Feedback = "On track for certification.",
                            IsActive = true,
                            Progress = 70,
                            Resources = "Cloud certifications, online courses.",
                            TargetCompletionDate = new DateTime(2024, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DevelopmentPlanId = 8,
                            Description = "Increase proficiency in Angular.",
                            DevelopmentPlanStatus = 0,
                            EmployeeId = 8,
                            Feedback = "Nearly complete, great work!",
                            IsActive = true,
                            Progress = 80,
                            Resources = "Angular documentation, online courses.",
                            TargetCompletionDate = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DevelopmentPlanId = 9,
                            Description = "Improve technical writing skills.",
                            DevelopmentPlanStatus = 1,
                            EmployeeId = 9,
                            Feedback = "Needs more practice.",
                            IsActive = true,
                            Progress = 20,
                            Resources = "Technical writing courses, guides.",
                            TargetCompletionDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DevelopmentPlanId = 10,
                            Description = "Gain proficiency in cybersecurity.",
                            DevelopmentPlanStatus = 0,
                            EmployeeId = 10,
                            Feedback = "Almost complete, keep up the good work!",
                            IsActive = true,
                            Progress = 90,
                            Resources = "Cybersecurity certifications, online courses.",
                            TargetCompletionDate = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Fanush.Entities.PerformenceManagement.Goal", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoalId"));

                    b.Property<int>("AssignedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoalStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GoalId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Goals");

                    b.HasData(
                        new
                        {
                            GoalId = 1,
                            AssignedByUserId = 1,
                            Comments = "On track for completion.",
                            Description = "Finish all tasks related to Project Alpha by Q3.",
                            EmployeeId = 1,
                            EndDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalStatus = 1,
                            IsActive = true,
                            LastUpdatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(3979),
                            Progress = 40,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Complete Project Alpha",
                            UpdatedBy = "Manager"
                        },
                        new
                        {
                            GoalId = 2,
                            AssignedByUserId = 2,
                            Comments = "Sales are improving steadily.",
                            Description = "Boost sales by 20% by end of the year.",
                            EmployeeId = 2,
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalStatus = 0,
                            IsActive = true,
                            LastUpdatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(3986),
                            Progress = 50,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Increase Sales by 20%",
                            UpdatedBy = "Sales Director"
                        },
                        new
                        {
                            GoalId = 3,
                            AssignedByUserId = 3,
                            Comments = "Working on campaign materials.",
                            Description = "Introduce a new marketing campaign to increase brand awareness.",
                            EmployeeId = 3,
                            EndDate = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalStatus = 1,
                            IsActive = true,
                            LastUpdatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(3989),
                            Progress = 30,
                            StartDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Launch New Marketing Campaign",
                            UpdatedBy = "Marketing Head"
                        },
                        new
                        {
                            GoalId = 4,
                            AssignedByUserId = 4,
                            Comments = "Plan needs more details.",
                            Description = "Improve customer support response time by 50%.",
                            EmployeeId = 4,
                            EndDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalStatus = 2,
                            IsActive = false,
                            LastUpdatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(3992),
                            Progress = 10,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Enhance Customer Support",
                            UpdatedBy = "Support Manager"
                        },
                        new
                        {
                            GoalId = 5,
                            AssignedByUserId = 5,
                            Comments = "Feature development is going well.",
                            Description = "Create and implement a new feature for the flagship product.",
                            EmployeeId = 5,
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalStatus = 0,
                            IsActive = true,
                            LastUpdatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(3994),
                            Progress = 60,
                            StartDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Develop New Product Feature",
                            UpdatedBy = "Product Manager"
                        },
                        new
                        {
                            GoalId = 6,
                            AssignedByUserId = 6,
                            Comments = "Identifying areas to reduce costs.",
                            Description = "Cut operational costs by 15% by Q4.",
                            EmployeeId = 6,
                            EndDate = new DateTime(2024, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalStatus = 1,
                            IsActive = true,
                            LastUpdatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(3997),
                            Progress = 20,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Reduce Operational Costs",
                            UpdatedBy = "Operations Head"
                        },
                        new
                        {
                            GoalId = 7,
                            AssignedByUserId = 7,
                            Comments = "Collaboration tools have been introduced.",
                            Description = "Enhance collaboration across departments.",
                            EmployeeId = 7,
                            EndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalStatus = 0,
                            IsActive = true,
                            LastUpdatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(3999),
                            Progress = 50,
                            StartDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Improve Team Collaboration",
                            UpdatedBy = "HR Manager"
                        },
                        new
                        {
                            GoalId = 8,
                            AssignedByUserId = 8,
                            Comments = "Supply chain optimization is in progress.",
                            Description = "Streamline the supply chain to reduce delays.",
                            EmployeeId = 8,
                            EndDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalStatus = 0,
                            IsActive = true,
                            LastUpdatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(4003),
                            Progress = 60,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Optimize Supply Chain",
                            UpdatedBy = "Supply Chain Manager"
                        },
                        new
                        {
                            GoalId = 9,
                            AssignedByUserId = 9,
                            Comments = "System is under testing.",
                            Description = "Introduce a new CRM system to improve customer management.",
                            EmployeeId = 9,
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalStatus = 1,
                            IsActive = true,
                            LastUpdatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(4005),
                            Progress = 30,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Implement New CRM System",
                            UpdatedBy = "IT Manager"
                        },
                        new
                        {
                            GoalId = 10,
                            AssignedByUserId = 10,
                            Comments = "Security protocols are being updated.",
                            Description = "Implement new data security measures to protect company assets.",
                            EmployeeId = 10,
                            EndDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalStatus = 0,
                            IsActive = true,
                            LastUpdatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(4008),
                            Progress = 70,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Enhance Data Security",
                            UpdatedBy = "Security Officer"
                        });
                });

            modelBuilder.Entity("Fanush.Entities.PerformenceManagement.PerformanceReport", b =>
                {
                    b.Property<int>("PerformanceReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerformanceReportId"));

                    b.Property<string>("Achievements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionItems")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreasForImprovement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DevelopmentPlan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("int");

                    b.Property<string>("GoalsMet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverallRating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PerformanceScore")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReviewPeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Strengths")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PerformanceReportId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PerformanceReports");

                    b.HasData(
                        new
                        {
                            PerformanceReportId = 1,
                            Achievements = "Led successful project delivery.",
                            ActionItems = "Set up a follow-up meeting in 3 months.",
                            AreasForImprovement = "Needs to improve time management.",
                            Comments = "Great performance, keep up the good work.",
                            DevelopmentPlan = "Focus on time management training.",
                            EmployeeId = 1,
                            EvaluationDate = new DateTime(2024, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvaluatorId = 2,
                            GoalsMet = "5 out of 7",
                            OverallRating = "Above Average",
                            PerformanceScore = 85,
                            ReviewPeriodEnd = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewPeriodStart = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            Strengths = "Excellent problem-solving skills."
                        },
                        new
                        {
                            PerformanceReportId = 2,
                            Achievements = "Implemented new system architecture.",
                            ActionItems = "Review progress in the next quarter.",
                            AreasForImprovement = "Needs better communication skills.",
                            Comments = "Good overall performance, with room for improvement.",
                            DevelopmentPlan = "Enroll in communication workshops.",
                            EmployeeId = 3,
                            EvaluationDate = new DateTime(2024, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvaluatorId = 4,
                            GoalsMet = "4 out of 6",
                            OverallRating = "Average",
                            PerformanceScore = 75,
                            ReviewPeriodEnd = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewPeriodStart = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            Strengths = "Strong technical knowledge."
                        },
                        new
                        {
                            PerformanceReportId = 3,
                            Achievements = "Successfully launched a new product line.",
                            ActionItems = "Continue with leadership training.",
                            AreasForImprovement = "Focus on strategic planning.",
                            Comments = "Outstanding performance, well done.",
                            DevelopmentPlan = "Attend leadership and strategy seminars.",
                            EmployeeId = 5,
                            EvaluationDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvaluatorId = 6,
                            GoalsMet = "6 out of 7",
                            OverallRating = "Excellent",
                            PerformanceScore = 90,
                            ReviewPeriodEnd = new DateTime(2024, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewPeriodStart = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            Strengths = "Excellent leadership and team management."
                        },
                        new
                        {
                            PerformanceReportId = 4,
                            Achievements = "Analyzed and optimized business processes.",
                            ActionItems = "Schedule a check-in meeting next quarter.",
                            AreasForImprovement = "Improve decision-making speed.",
                            Comments = "Solid performance, needs slight improvements.",
                            DevelopmentPlan = "Participate in decision-making workshops.",
                            EmployeeId = 7,
                            EvaluationDate = new DateTime(2024, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvaluatorId = 8,
                            GoalsMet = "5 out of 7",
                            OverallRating = "Above Average",
                            PerformanceScore = 80,
                            ReviewPeriodEnd = new DateTime(2024, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewPeriodStart = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            Strengths = "Strong analytical skills."
                        },
                        new
                        {
                            PerformanceReportId = 5,
                            Achievements = "Supported multiple successful projects.",
                            ActionItems = "Review progress in the next performance cycle.",
                            AreasForImprovement = "Enhance technical skills.",
                            Comments = "Needs improvement in technical aspects.",
                            DevelopmentPlan = "Focus on technical certifications.",
                            EmployeeId = 9,
                            EvaluationDate = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvaluatorId = 10,
                            GoalsMet = "3 out of 5",
                            OverallRating = "Average",
                            PerformanceScore = 70,
                            ReviewPeriodEnd = new DateTime(2024, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewPeriodStart = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            Strengths = "Good team collaboration."
                        },
                        new
                        {
                            PerformanceReportId = 6,
                            Achievements = "Delivered complex project on time.",
                            ActionItems = "Schedule a leadership training session.",
                            AreasForImprovement = "Needs to improve delegation skills.",
                            Comments = "Good performance, with potential for growth.",
                            DevelopmentPlan = "Attend workshops on delegation and leadership.",
                            EmployeeId = 2,
                            EvaluationDate = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvaluatorId = 3,
                            GoalsMet = "4 out of 5",
                            OverallRating = "Above Average",
                            PerformanceScore = 85,
                            ReviewPeriodEnd = new DateTime(2024, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewPeriodStart = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            Strengths = "Great attention to detail."
                        },
                        new
                        {
                            PerformanceReportId = 7,
                            Achievements = "Secured major client deals.",
                            ActionItems = "Follow up on client feedback.",
                            AreasForImprovement = "Enhance negotiation skills.",
                            Comments = "Solid performance with room for growth.",
                            DevelopmentPlan = "Participate in negotiation training.",
                            EmployeeId = 4,
                            EvaluationDate = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvaluatorId = 5,
                            GoalsMet = "5 out of 6",
                            OverallRating = "Above Average",
                            PerformanceScore = 80,
                            ReviewPeriodEnd = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewPeriodStart = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            Strengths = "Strong client relationship management."
                        },
                        new
                        {
                            PerformanceReportId = 8,
                            Achievements = "Contributed significantly to team success.",
                            ActionItems = "Schedule a writing workshop.",
                            AreasForImprovement = "Improve technical documentation skills.",
                            Comments = "Good performance, with minor improvements needed.",
                            DevelopmentPlan = "Focus on technical writing courses.",
                            EmployeeId = 6,
                            EvaluationDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvaluatorId = 7,
                            GoalsMet = "4 out of 5",
                            OverallRating = "Average",
                            PerformanceScore = 75,
                            ReviewPeriodEnd = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewPeriodStart = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            Strengths = "Effective team player."
                        },
                        new
                        {
                            PerformanceReportId = 9,
                            Achievements = "Contributed significantly to team success.",
                            ActionItems = "Schedule a writing workshop.",
                            AreasForImprovement = "Improve technical documentation skills.",
                            Comments = "Good performance, with minor improvements needed.",
                            DevelopmentPlan = "Focus on technical writing courses.",
                            EmployeeId = 7,
                            EvaluationDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvaluatorId = 8,
                            GoalsMet = "4 out of 5",
                            OverallRating = "Average",
                            PerformanceScore = 85,
                            ReviewPeriodEnd = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewPeriodStart = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            Strengths = "Effective team player."
                        },
                        new
                        {
                            PerformanceReportId = 10,
                            Achievements = "Contributed significantly to team success.",
                            ActionItems = "Schedule a writing workshop.",
                            AreasForImprovement = "Improve technical documentation skills.",
                            Comments = "Good performance, with minor improvements needed.",
                            DevelopmentPlan = "Focus on technical writing courses.",
                            EmployeeId = 8,
                            EvaluationDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvaluatorId = 9,
                            GoalsMet = "4 out of 5",
                            OverallRating = "Average",
                            PerformanceScore = 90,
                            ReviewPeriodEnd = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewPeriodStart = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            Strengths = "Effective team player."
                        });
                });

            modelBuilder.Entity("Fanush.Entities.PerformenceManagement.PerformanceReview", b =>
                {
                    b.Property<int>("PerformanceReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerformanceReviewId"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PerformanceRating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.HasKey("PerformanceReviewId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PerformanceReviews");

                    b.HasData(
                        new
                        {
                            PerformanceReviewId = 1,
                            Comments = "Exceptional performance",
                            EmployeeId = 1,
                            Feedback = "Great job overall, keep up the good work.",
                            PerformanceRating = 5,
                            ReviewDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(4108),
                            ReviewType = "Annual",
                            ReviewerId = 1
                        },
                        new
                        {
                            PerformanceReviewId = 2,
                            Comments = "Solid performance",
                            EmployeeId = 2,
                            Feedback = "Good progress but needs improvement in communication.",
                            PerformanceRating = 4,
                            ReviewDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(4110),
                            ReviewType = "Quarterly",
                            ReviewerId = 2
                        },
                        new
                        {
                            PerformanceReviewId = 3,
                            Comments = "Satisfactory performance",
                            EmployeeId = 3,
                            Feedback = "Requires more focus on client interactions.",
                            PerformanceRating = 3,
                            ReviewDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(4112),
                            ReviewType = "Annual",
                            ReviewerId = 3
                        },
                        new
                        {
                            PerformanceReviewId = 4,
                            Comments = "Outstanding",
                            EmployeeId = 4,
                            Feedback = "Excellent leadership skills demonstrated.",
                            PerformanceRating = 5,
                            ReviewDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(4114),
                            ReviewType = "Quarterly",
                            ReviewerId = 4
                        },
                        new
                        {
                            PerformanceReviewId = 5,
                            Comments = "Good effort",
                            EmployeeId = 5,
                            Feedback = "Good analytical skills, needs improvement in client relations.",
                            PerformanceRating = 4,
                            ReviewDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(4115),
                            ReviewType = "Annual",
                            ReviewerId = 5
                        },
                        new
                        {
                            PerformanceReviewId = 6,
                            Comments = "Good teamwork",
                            EmployeeId = 6,
                            Feedback = "Strong teamwork but needs better project management.",
                            PerformanceRating = 4,
                            ReviewDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(4118),
                            ReviewType = "Quarterly",
                            ReviewerId = 6
                        },
                        new
                        {
                            PerformanceReviewId = 7,
                            Comments = "Needs improvement",
                            EmployeeId = 7,
                            Feedback = "Creative thinking is a strength, work on organizational skills.",
                            PerformanceRating = 3,
                            ReviewDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(4119),
                            ReviewType = "Annual",
                            ReviewerId = 7
                        },
                        new
                        {
                            PerformanceReviewId = 8,
                            Comments = "Very strong performance",
                            EmployeeId = 8,
                            Feedback = "Excellent technical expertise, communication skills need work.",
                            PerformanceRating = 5,
                            ReviewDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(4121),
                            ReviewType = "Quarterly",
                            ReviewerId = 8
                        },
                        new
                        {
                            PerformanceReviewId = 9,
                            Comments = "Satisfactory",
                            EmployeeId = 9,
                            Feedback = "Dependable employee, needs improvement in time management.",
                            PerformanceRating = 3,
                            ReviewDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(4123),
                            ReviewType = "Annual",
                            ReviewerId = 9
                        },
                        new
                        {
                            PerformanceReviewId = 10,
                            Comments = "Good performance",
                            EmployeeId = 10,
                            Feedback = "Great attention to detail, work on team collaboration.",
                            PerformanceRating = 4,
                            ReviewDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(4125),
                            ReviewType = "Quarterly",
                            ReviewerId = 10
                        });
                });

            modelBuilder.Entity("Fanush.Entities.RecruitmentManagement.Applicant", b =>
                {
                    b.Property<int>("ApplicantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicantId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AppliedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ExpectedSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedinProfileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("References")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumeUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicantId");

                    b.ToTable("Applicants");

                    b.HasData(
                        new
                        {
                            ApplicantId = 1,
                            Address = "123 Main St",
                            ApplicantName = "John Doe",
                            AppliedDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "New York",
                            Country = "USA",
                            Email = "john.doe@example.com",
                            ExpectedSalary = 70000m,
                            Languages = "English, Spanish",
                            LinkedinProfileUrl = "https://linkedin.com/in/johndoe",
                            PhoneNumber = "123-456-7890",
                            References = "Available upon request",
                            ResumeUrl = "https://example.com/resume/johndoe.pdf",
                            Skills = "C#, .NET, SQL",
                            Status = "Approved",
                            ZipCode = "10001"
                        },
                        new
                        {
                            ApplicantId = 2,
                            Address = "456 Oak St",
                            ApplicantName = "Alice Johnson",
                            AppliedDate = new DateTime(2024, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "San Francisco",
                            Country = "USA",
                            Email = "alice.johnson@example.com",
                            ExpectedSalary = 80000m,
                            Languages = "English, Mandarin",
                            LinkedinProfileUrl = "https://linkedin.com/in/alicejohnson",
                            PhoneNumber = "234-567-8901",
                            References = "Available upon request",
                            ResumeUrl = "https://example.com/resume/alicejohnson.pdf",
                            Skills = "JavaScript, React, Node.js",
                            Status = "Pending",
                            ZipCode = "94101"
                        },
                        new
                        {
                            ApplicantId = 3,
                            Address = "789 Pine St",
                            ApplicantName = "Robert Smith",
                            AppliedDate = new DateTime(2024, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Los Angeles",
                            Country = "USA",
                            Email = "robert.smith@example.com",
                            ExpectedSalary = 90000m,
                            Languages = "English, French",
                            LinkedinProfileUrl = "https://linkedin.com/in/robertsmith",
                            PhoneNumber = "345-678-9012",
                            References = "Available upon request",
                            ResumeUrl = "https://example.com/resume/robertsmith.pdf",
                            Skills = "Python, Django, Flask",
                            Status = "Approved",
                            ZipCode = "90001"
                        },
                        new
                        {
                            ApplicantId = 4,
                            Address = "101 Maple St",
                            ApplicantName = "Emily Davis",
                            AppliedDate = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Chicago",
                            Country = "USA",
                            Email = "emily.davis@example.com",
                            ExpectedSalary = 85000m,
                            Languages = "English, German",
                            LinkedinProfileUrl = "https://linkedin.com/in/emilydavis",
                            PhoneNumber = "456-789-0123",
                            References = "Available upon request",
                            ResumeUrl = "https://example.com/resume/emilydavis.pdf",
                            Skills = "Java, Spring, Hibernate",
                            Status = "Rejected",
                            ZipCode = "60601"
                        },
                        new
                        {
                            ApplicantId = 5,
                            Address = "202 Cedar St",
                            ApplicantName = "Michael Brown",
                            AppliedDate = new DateTime(2024, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Houston",
                            Country = "USA",
                            Email = "michael.brown@example.com",
                            ExpectedSalary = 75000m,
                            Languages = "English, Japanese",
                            LinkedinProfileUrl = "https://linkedin.com/in/michaelbrown",
                            PhoneNumber = "567-890-1234",
                            References = "Available upon request",
                            ResumeUrl = "https://example.com/resume/michaelbrown.pdf",
                            Skills = "C++, Unreal Engine, Game Development",
                            Status = "Pending",
                            ZipCode = "77001"
                        },
                        new
                        {
                            ApplicantId = 6,
                            Address = "303 Spruce St",
                            ApplicantName = "Sophia Martinez",
                            AppliedDate = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Phoenix",
                            Country = "USA",
                            Email = "sophia.martinez@example.com",
                            ExpectedSalary = 78000m,
                            Languages = "English, Italian",
                            LinkedinProfileUrl = "https://linkedin.com/in/sophiamartinez",
                            PhoneNumber = "678-901-2345",
                            References = "Available upon request",
                            ResumeUrl = "https://example.com/resume/sophiamartinez.pdf",
                            Skills = "Ruby on Rails, PostgreSQL, DevOps",
                            Status = "Approved",
                            ZipCode = "85001"
                        },
                        new
                        {
                            ApplicantId = 7,
                            Address = "404 Birch St",
                            ApplicantName = "David Lee",
                            AppliedDate = new DateTime(2024, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Miami",
                            Country = "USA",
                            Email = "david.lee@example.com",
                            ExpectedSalary = 82000m,
                            Languages = "English, Korean",
                            LinkedinProfileUrl = "https://linkedin.com/in/davidlee",
                            PhoneNumber = "789-012-3456",
                            References = "Available upon request",
                            ResumeUrl = "https://example.com/resume/davidlee.pdf",
                            Skills = "Go, Kubernetes, Microservices",
                            Status = "Rejected",
                            ZipCode = "33101"
                        },
                        new
                        {
                            ApplicantId = 8,
                            Address = "505 Ash St",
                            ApplicantName = "Olivia Wilson",
                            AppliedDate = new DateTime(2024, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Seattle",
                            Country = "USA",
                            Email = "olivia.wilson@example.com",
                            ExpectedSalary = 77000m,
                            Languages = "English, Spanish",
                            LinkedinProfileUrl = "https://linkedin.com/in/oliviawilson",
                            PhoneNumber = "890-123-4567",
                            References = "Available upon request",
                            ResumeUrl = "https://example.com/resume/oliviawilson.pdf",
                            Skills = "Swift, iOS Development, UI/UX Design",
                            Status = "Pending",
                            ZipCode = "98101"
                        },
                        new
                        {
                            ApplicantId = 9,
                            Address = "606 Poplar St",
                            ApplicantName = "William Taylor",
                            AppliedDate = new DateTime(2024, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Boston",
                            Country = "USA",
                            Email = "william.taylor@example.com",
                            ExpectedSalary = 90000m,
                            Languages = "English, Portuguese",
                            LinkedinProfileUrl = "https://linkedin.com/in/williamtaylor",
                            PhoneNumber = "901-234-5678",
                            References = "Available upon request",
                            ResumeUrl = "https://example.com/resume/williamtaylor.pdf",
                            Skills = "JavaScript, Angular, Node.js",
                            Status = "Approved",
                            ZipCode = "02101"
                        },
                        new
                        {
                            ApplicantId = 10,
                            Address = "707 Willow St",
                            ApplicantName = "Charlotte Harris",
                            AppliedDate = new DateTime(2024, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Dallas",
                            Country = "USA",
                            Email = "charlotte.harris@example.com",
                            ExpectedSalary = 84000m,
                            Languages = "English, Russian",
                            LinkedinProfileUrl = "https://linkedin.com/in/charlotteharris",
                            PhoneNumber = "012-345-6789",
                            References = "Available upon request",
                            ResumeUrl = "https://example.com/resume/charlotteharris.pdf",
                            Skills = "PHP, Laravel, MySQL",
                            Status = "Pending",
                            ZipCode = "75201"
                        });
                });

            modelBuilder.Entity("Fanush.Entities.RecruitmentManagement.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationId"));

                    b.Property<int?>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassingYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Result")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("EducationId");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            EducationId = 1,
                            ApplicantId = 1,
                            Degree = "Bachelor's Degree",
                            Institution = "University A",
                            PassingYear = "2020",
                            Result = 3.5m
                        },
                        new
                        {
                            EducationId = 2,
                            ApplicantId = 2,
                            Degree = "Master's Degree",
                            Institution = "University B",
                            PassingYear = "2022",
                            Result = 3.8m
                        },
                        new
                        {
                            EducationId = 3,
                            ApplicantId = 3,
                            Degree = "PhD",
                            Institution = "University C",
                            PassingYear = "2024",
                            Result = 4.0m
                        },
                        new
                        {
                            EducationId = 4,
                            ApplicantId = 4,
                            Degree = "Associate's Degree",
                            Institution = "College D",
                            PassingYear = "2018",
                            Result = 3.2m
                        },
                        new
                        {
                            EducationId = 5,
                            ApplicantId = 5,
                            Degree = "Diploma",
                            Institution = "Institute E",
                            PassingYear = "2019",
                            Result = 3.0m
                        },
                        new
                        {
                            EducationId = 6,
                            ApplicantId = 6,
                            Degree = "Bachelor's Degree",
                            Institution = "University F",
                            PassingYear = "2021",
                            Result = 3.6m
                        },
                        new
                        {
                            EducationId = 7,
                            ApplicantId = 7,
                            Degree = "Master's Degree",
                            Institution = "University G",
                            PassingYear = "2023",
                            Result = 3.9m
                        },
                        new
                        {
                            EducationId = 8,
                            ApplicantId = 8,
                            Degree = "Certificate",
                            Institution = "Training Center H",
                            PassingYear = "2022",
                            Result = 3.8m
                        },
                        new
                        {
                            EducationId = 9,
                            ApplicantId = 9,
                            Degree = "High School",
                            Institution = "School I",
                            PassingYear = "2017",
                            Result = 3.1m
                        },
                        new
                        {
                            EducationId = 10,
                            ApplicantId = 10,
                            Degree = "Bachelor's Degree",
                            Institution = "University J",
                            PassingYear = "2020",
                            Result = 3.7m
                        });
                });

            modelBuilder.Entity("Fanush.Entities.RecruitmentManagement.Interview", b =>
                {
                    b.Property<int>("InterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterviewId"));

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FollowUp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InterviewType")
                        .HasColumnType("int");

                    b.Property<string>("Interviewer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Outcome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InterviewId");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Interviews");

                    b.HasData(
                        new
                        {
                            InterviewId = 1,
                            ApplicantId = 1,
                            DateTime = new DateTime(2024, 7, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 30,
                            Feedback = "Candidate demonstrated strong technical skills.",
                            FollowUp = "Schedule a technical interview.",
                            InterviewType = 0,
                            Interviewer = "John Smith",
                            IsActive = true,
                            Location = "Conference Room A",
                            Notes = "Initial screening for software engineer position.",
                            Outcome = "Pending"
                        },
                        new
                        {
                            InterviewId = 2,
                            ApplicantId = 2,
                            DateTime = new DateTime(2024, 7, 2, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 45,
                            Feedback = "Good problem-solving abilities, needs to improve on coding efficiency.",
                            FollowUp = "Send coding challenge for further assessment.",
                            InterviewType = 1,
                            Interviewer = "Alice Johnson",
                            IsActive = true,
                            Location = "Zoom Meeting",
                            Notes = "Technical interview with frontend developer.",
                            Outcome = "Pending"
                        },
                        new
                        {
                            InterviewId = 3,
                            ApplicantId = 3,
                            DateTime = new DateTime(2024, 7, 3, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            Feedback = "Excellent understanding of data analysis concepts.",
                            FollowUp = "Prepare offer letter.",
                            InterviewType = 2,
                            Interviewer = "Robert Brown",
                            IsActive = true,
                            Location = "Office Lobby",
                            Notes = "In-person interview for data scientist role.",
                            Outcome = "Hired"
                        },
                        new
                        {
                            InterviewId = 4,
                            ApplicantId = 4,
                            DateTime = new DateTime(2024, 7, 4, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 40,
                            Feedback = "Strong leadership skills but lacks experience in Agile methodologies.",
                            FollowUp = "Discuss with team regarding Agile experience.",
                            InterviewType = 0,
                            Interviewer = "Emily White",
                            IsActive = true,
                            Location = "Conference Room B",
                            Notes = "Final round interview for project manager position.",
                            Outcome = "Pending"
                        },
                        new
                        {
                            InterviewId = 5,
                            ApplicantId = 5,
                            DateTime = new DateTime(2024, 7, 5, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 50,
                            Feedback = "Good design portfolio, needs improvement in user research.",
                            FollowUp = "Arrange onboarding session.",
                            InterviewType = 1,
                            Interviewer = "Grace Clark",
                            IsActive = true,
                            Location = "Office Meeting Room",
                            Notes = "Interview for UX designer position.",
                            Outcome = "Hired"
                        },
                        new
                        {
                            InterviewId = 6,
                            ApplicantId = 6,
                            DateTime = new DateTime(2024, 7, 6, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 30,
                            Feedback = "Candidate has good analytical skills.",
                            FollowUp = "Send rejection email.",
                            InterviewType = 2,
                            Interviewer = "Henry Allen",
                            IsActive = false,
                            Location = "Virtual Meeting",
                            Notes = "Initial interview for business analyst role.",
                            Outcome = "Rejected"
                        },
                        new
                        {
                            InterviewId = 7,
                            ApplicantId = 7,
                            DateTime = new DateTime(2024, 7, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 35,
                            Feedback = "Impressive technical knowledge but weak in communication skills.",
                            FollowUp = "Consider additional communication training.",
                            InterviewType = 0,
                            Interviewer = "Linda Gray",
                            IsActive = true,
                            Location = "Conference Room C",
                            Notes = "Technical interview for systems analyst position.",
                            Outcome = "Pending"
                        },
                        new
                        {
                            InterviewId = 8,
                            ApplicantId = 8,
                            DateTime = new DateTime(2024, 7, 8, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 60,
                            Feedback = "Strong technical background and problem-solving skills.",
                            FollowUp = "Prepare employment contract.",
                            InterviewType = 1,
                            Interviewer = "Sarah Black",
                            IsActive = true,
                            Location = "Office Meeting Room",
                            Notes = "Final interview for network engineer role.",
                            Outcome = "Hired"
                        },
                        new
                        {
                            InterviewId = 9,
                            ApplicantId = 9,
                            DateTime = new DateTime(2024, 7, 9, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 40,
                            Feedback = "Excellent knowledge of cloud technologies, needs to work on soft skills.",
                            FollowUp = "Arrange for soft skills training.",
                            InterviewType = 2,
                            Interviewer = "Paul Black",
                            IsActive = true,
                            Location = "Zoom Meeting",
                            Notes = "Interview for cloud engineer position.",
                            Outcome = "Pending"
                        },
                        new
                        {
                            InterviewId = 10,
                            ApplicantId = 10,
                            DateTime = new DateTime(2024, 7, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DurationMinutes = 30,
                            Feedback = "Good technical skills, but needs more experience in customer support.",
                            FollowUp = "Send onboarding instructions.",
                            InterviewType = 0,
                            Interviewer = "Samantha Lee",
                            IsActive = true,
                            Location = "Office Conference Room",
                            Notes = "Interview for IT support specialist.",
                            Outcome = "Hired"
                        });
                });

            modelBuilder.Entity("Fanush.Entities.RecruitmentManagement.JobPosting", b =>
                {
                    b.Property<int>("JobPostingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobPostingId"));

                    b.Property<DateTime>("ApplicationDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("BenefitsOffered")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExperienceRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoteWork")
                        .HasColumnType("bit");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalaryInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillsRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkSchedule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobPostingId");

                    b.ToTable("JobPostings");

                    b.HasData(
                        new
                        {
                            JobPostingId = 1,
                            ApplicationDeadline = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BenefitsOffered = "Healthcare, 401(k), Paid time off",
                            City = "San Francisco",
                            ContactEmail = "hr@company.com",
                            ContactPhone = "123-456-7890",
                            Description = "Develop and maintain software applications.",
                            EducationRequired = "Bachelor's degree",
                            ExperienceRequired = "2 years",
                            IsActive = true,
                            IsInternal = false,
                            IsRemoteWork = false,
                            JobType = "Full-time",
                            PostingDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Requirements = "Bachelor's degree in Computer Science, 2+ years of experience.",
                            SalaryInformation = "Competitive salary based on experience",
                            SkillsRequired = "C#, .NET, SQL",
                            StartDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Software Engineer",
                            WorkSchedule = "Monday to Friday, 9 AM to 5 PM"
                        },
                        new
                        {
                            JobPostingId = 2,
                            ApplicationDeadline = new DateTime(2024, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BenefitsOffered = "Healthcare, Flexible working hours",
                            City = "New York",
                            ContactEmail = "design@company.com",
                            ContactPhone = "987-654-3210",
                            Description = "Design user-friendly interfaces and experiences.",
                            EducationRequired = "Associate's degree or higher",
                            ExperienceRequired = "3 years",
                            IsActive = true,
                            IsInternal = true,
                            IsRemoteWork = true,
                            JobType = "Part-time",
                            PostingDate = new DateTime(2024, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Requirements = "3+ years of UX/UI design experience.",
                            SalaryInformation = "Negotiable based on experience",
                            SkillsRequired = "Sketch, Figma, Adobe XD",
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "UX Designer",
                            WorkSchedule = "Flexible hours"
                        },
                        new
                        {
                            JobPostingId = 3,
                            ApplicationDeadline = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BenefitsOffered = "Healthcare, Retirement plan, Paid vacation",
                            City = "Chicago",
                            ContactEmail = "pm@company.com",
                            ContactPhone = "555-123-4567",
                            Description = "Manage project timelines, budgets, and team coordination.",
                            EducationRequired = "Bachelor's degree",
                            ExperienceRequired = "5 years",
                            IsActive = true,
                            IsInternal = false,
                            IsRemoteWork = false,
                            JobType = "Full-time",
                            PostingDate = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Requirements = "PMP certification, 5+ years of project management experience.",
                            SalaryInformation = "Up to $100,000 per year",
                            SkillsRequired = "Project management, Budgeting, Scheduling",
                            StartDate = new DateTime(2024, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Project Manager",
                            WorkSchedule = "Monday to Friday, 8 AM to 4 PM"
                        },
                        new
                        {
                            JobPostingId = 4,
                            ApplicationDeadline = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BenefitsOffered = "Healthcare, Paid sick leave",
                            City = "Los Angeles",
                            ContactEmail = "data@company.com",
                            ContactPhone = "321-654-9870",
                            Description = "Analyze data and generate reports to support business decisions.",
                            EducationRequired = "Bachelor's degree in a related field",
                            ExperienceRequired = "2 years",
                            IsActive = true,
                            IsInternal = false,
                            IsRemoteWork = true,
                            JobType = "Contract",
                            PostingDate = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Requirements = "2+ years of data analysis experience, proficiency in SQL.",
                            SalaryInformation = "Competitive salary, based on experience",
                            SkillsRequired = "SQL, Excel, Data visualization",
                            StartDate = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Data Analyst",
                            WorkSchedule = "Monday to Friday, 9 AM to 6 PM"
                        },
                        new
                        {
                            JobPostingId = 5,
                            ApplicationDeadline = new DateTime(2024, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BenefitsOffered = "Healthcare, 401(k), Paid time off",
                            City = "Boston",
                            ContactEmail = "marketing@company.com",
                            ContactPhone = "654-321-0987",
                            Description = "Coordinate marketing campaigns and events.",
                            EducationRequired = "Bachelor's degree in Marketing or related field",
                            ExperienceRequired = "1 year",
                            IsActive = true,
                            IsInternal = true,
                            IsRemoteWork = false,
                            JobType = "Full-time",
                            PostingDate = new DateTime(2024, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Requirements = "1+ years of marketing experience.",
                            SalaryInformation = "Base salary + performance bonuses",
                            SkillsRequired = "Marketing strategy, Event planning, Social media",
                            StartDate = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Marketing Coordinator",
                            WorkSchedule = "Monday to Friday, 8 AM to 5 PM"
                        },
                        new
                        {
                            JobPostingId = 6,
                            ApplicationDeadline = new DateTime(2024, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BenefitsOffered = "Healthcare, Paid time off",
                            City = "Seattle",
                            ContactEmail = "support@company.com",
                            ContactPhone = "456-789-0123",
                            Description = "Provide customer support and resolve customer issues.",
                            EducationRequired = "High school diploma",
                            ExperienceRequired = "1 year",
                            IsActive = true,
                            IsInternal = false,
                            IsRemoteWork = true,
                            JobType = "Part-time",
                            PostingDate = new DateTime(2024, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Requirements = "Excellent communication skills, 1+ years of customer service experience.",
                            SalaryInformation = "Hourly rate + benefits",
                            SkillsRequired = "Customer service, Problem-solving, Communication",
                            StartDate = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Customer Support Specialist",
                            WorkSchedule = "Flexible hours"
                        },
                        new
                        {
                            JobPostingId = 7,
                            ApplicationDeadline = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BenefitsOffered = "Healthcare, 401(k), Paid time off",
                            City = "San Diego",
                            ContactEmail = "design@company.com",
                            ContactPhone = "789-012-3456",
                            Description = "Design marketing materials and brand assets.",
                            EducationRequired = "Bachelor's degree in Design or related field",
                            ExperienceRequired = "2 years",
                            IsActive = true,
                            IsInternal = true,
                            IsRemoteWork = false,
                            JobType = "Full-time",
                            PostingDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Requirements = "2+ years of graphic design experience, portfolio required.",
                            SalaryInformation = "Competitive salary based on experience",
                            SkillsRequired = "Adobe Creative Suite, Graphic design, Creativity",
                            StartDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Graphic Designer",
                            WorkSchedule = "Monday to Friday, 9 AM to 5 PM"
                        },
                        new
                        {
                            JobPostingId = 8,
                            ApplicationDeadline = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BenefitsOffered = "Healthcare, Paid time off",
                            City = "Austin",
                            ContactEmail = "testing@company.com",
                            ContactPhone = "012-345-6789",
                            Description = "Test software applications to ensure quality and performance.",
                            EducationRequired = "Bachelor's degree in Computer Science",
                            ExperienceRequired = "1 year",
                            IsActive = true,
                            IsInternal = false,
                            IsRemoteWork = true,
                            JobType = "Contract",
                            PostingDate = new DateTime(2024, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Requirements = "1+ years of software testing experience.",
                            SalaryInformation = "Up to $80,000 per year",
                            SkillsRequired = "Testing tools, Attention to detail, Problem-solving",
                            StartDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Software Tester",
                            WorkSchedule = "Monday to Friday, 10 AM to 6 PM"
                        },
                        new
                        {
                            JobPostingId = 9,
                            ApplicationDeadline = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BenefitsOffered = "Healthcare, 401(k), Paid vacation",
                            City = "Philadelphia",
                            ContactEmail = "hr@company.com",
                            ContactPhone = "345-678-9012",
                            Description = "Manage HR functions and employee relations.",
                            EducationRequired = "Bachelor's degree in Human Resources or related field",
                            ExperienceRequired = "3 years",
                            IsActive = true,
                            IsInternal = true,
                            IsRemoteWork = false,
                            JobType = "Full-time",
                            PostingDate = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Requirements = "3+ years of HR experience, strong interpersonal skills.",
                            SalaryInformation = "Negotiable based on experience",
                            SkillsRequired = "HR management, Employee relations, Recruitment",
                            StartDate = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "HR Specialist",
                            WorkSchedule = "Monday to Friday, 8 AM to 5 PM"
                        },
                        new
                        {
                            JobPostingId = 10,
                            ApplicationDeadline = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BenefitsOffered = "Healthcare, Flexible working hours",
                            City = "Denver",
                            ContactEmail = "content@company.com",
                            ContactPhone = "456-789-1234",
                            Description = "Write and edit content for various platforms.",
                            EducationRequired = "Bachelor's degree in English or related field",
                            ExperienceRequired = "2 years",
                            IsActive = true,
                            IsInternal = false,
                            IsRemoteWork = true,
                            JobType = "Part-time",
                            PostingDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Requirements = "2+ years of content writing experience, strong writing skills.",
                            SalaryInformation = "Competitive salary with performance bonuses",
                            SkillsRequired = "Content writing, SEO, Editing",
                            StartDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Content Writer",
                            WorkSchedule = "Flexible hours"
                        });
                });

            modelBuilder.Entity("Fanush.Entities.RecruitmentManagement.WorkExperience", b =>
                {
                    b.Property<int>("WorkExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkExperienceId"));

                    b.Property<int?>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkExperienceId");

                    b.HasIndex("ApplicantId");

                    b.ToTable("WorkExperiences");

                    b.HasData(
                        new
                        {
                            WorkExperienceId = 1,
                            ApplicantId = 1,
                            Company = "TechCorp",
                            Duration = "2 years",
                            Position = "Software Engineer"
                        },
                        new
                        {
                            WorkExperienceId = 2,
                            ApplicantId = 2,
                            Company = "WebSolutions",
                            Duration = "3 years",
                            Position = "Frontend Developer"
                        },
                        new
                        {
                            WorkExperienceId = 3,
                            ApplicantId = 3,
                            Company = "DataWorks",
                            Duration = "4 years",
                            Position = "Data Scientist"
                        },
                        new
                        {
                            WorkExperienceId = 4,
                            ApplicantId = 4,
                            Company = "FinanceTech",
                            Duration = "1 year",
                            Position = "Backend Developer"
                        },
                        new
                        {
                            WorkExperienceId = 5,
                            ApplicantId = 5,
                            Company = "GameStudio",
                            Duration = "2 years",
                            Position = "Game Developer"
                        },
                        new
                        {
                            WorkExperienceId = 6,
                            ApplicantId = 6,
                            Company = "DevOpsInc",
                            Duration = "3 years",
                            Position = "DevOps Engineer"
                        },
                        new
                        {
                            WorkExperienceId = 7,
                            ApplicantId = 7,
                            Company = "MicroServicesCo",
                            Duration = "4 years",
                            Position = "Microservices Architect"
                        },
                        new
                        {
                            WorkExperienceId = 8,
                            ApplicantId = 8,
                            Company = "AppDesign",
                            Duration = "2 years",
                            Position = "iOS Developer"
                        },
                        new
                        {
                            WorkExperienceId = 9,
                            ApplicantId = 9,
                            Company = "WebTech",
                            Duration = "3 years",
                            Position = "Full Stack Developer"
                        },
                        new
                        {
                            WorkExperienceId = 10,
                            ApplicantId = 10,
                            Company = "EnterpriseSolutions",
                            Duration = "5 years",
                            Position = "PHP Developer"
                        });
                });

            modelBuilder.Entity("Fanush.Entities.TimeAndAttendence.AbsenceReport", b =>
                {
                    b.Property<int>("AbsenceReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AbsenceReportId"));

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Approver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DaysAbsent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HalfDayType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHalfDay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AbsenceReportId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AbsenceReports");

                    b.HasData(
                        new
                        {
                            AbsenceReportId = 1,
                            ApprovedDate = new DateTime(2024, 8, 3, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Approver = "John Doe",
                            DaysAbsent = 2.0m,
                            EmployeeId = 1,
                            EndDate = new DateTime(2024, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HalfDayType = "None",
                            IsHalfDay = false,
                            IsPaid = true,
                            Reason = "Medical Leave",
                            StartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved"
                        },
                        new
                        {
                            AbsenceReportId = 2,
                            ApprovedDate = new DateTime(2024, 7, 14, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Approver = "Jane Smith",
                            DaysAbsent = 0.5m,
                            EmployeeId = 2,
                            EndDate = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HalfDayType = "Morning",
                            IsHalfDay = true,
                            IsPaid = false,
                            Reason = "Personal Leave",
                            StartDate = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved"
                        },
                        new
                        {
                            AbsenceReportId = 3,
                            ApprovedDate = new DateTime(2024, 8, 6, 14, 15, 0, 0, DateTimeKind.Unspecified),
                            Approver = "John Doe",
                            DaysAbsent = 3.0m,
                            EmployeeId = 3,
                            EndDate = new DateTime(2024, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HalfDayType = "None",
                            IsHalfDay = false,
                            IsPaid = false,
                            Reason = "Family Emergency",
                            StartDate = new DateTime(2024, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending"
                        },
                        new
                        {
                            AbsenceReportId = 4,
                            ApprovedDate = new DateTime(2024, 7, 22, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Approver = "Jane Smith",
                            DaysAbsent = 2.0m,
                            EmployeeId = 4,
                            EndDate = new DateTime(2024, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HalfDayType = "None",
                            IsHalfDay = false,
                            IsPaid = true,
                            Reason = "Sick Leave",
                            StartDate = new DateTime(2024, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved"
                        },
                        new
                        {
                            AbsenceReportId = 5,
                            ApprovedDate = new DateTime(2024, 8, 10, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Approver = "John Doe",
                            DaysAbsent = 0.5m,
                            EmployeeId = 5,
                            EndDate = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HalfDayType = "Afternoon",
                            IsHalfDay = true,
                            IsPaid = false,
                            Reason = "Doctor's Appointment",
                            StartDate = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved"
                        },
                        new
                        {
                            AbsenceReportId = 6,
                            ApprovedDate = new DateTime(2024, 7, 29, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Approver = "Jane Smith",
                            DaysAbsent = 2.0m,
                            EmployeeId = 6,
                            EndDate = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HalfDayType = "None",
                            IsHalfDay = false,
                            IsPaid = true,
                            Reason = "Vacation",
                            StartDate = new DateTime(2024, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved"
                        },
                        new
                        {
                            AbsenceReportId = 7,
                            ApprovedDate = new DateTime(2024, 8, 7, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Approver = "John Doe",
                            DaysAbsent = 2.0m,
                            EmployeeId = 7,
                            EndDate = new DateTime(2024, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HalfDayType = "None",
                            IsHalfDay = false,
                            IsPaid = true,
                            Reason = "Jury Duty",
                            StartDate = new DateTime(2024, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved"
                        },
                        new
                        {
                            AbsenceReportId = 8,
                            ApprovedDate = new DateTime(2024, 8, 16, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Approver = "Jane Smith",
                            DaysAbsent = 0.5m,
                            EmployeeId = 8,
                            EndDate = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HalfDayType = "Morning",
                            IsHalfDay = true,
                            IsPaid = false,
                            Reason = "Bereavement Leave",
                            StartDate = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending"
                        },
                        new
                        {
                            AbsenceReportId = 9,
                            ApprovedDate = new DateTime(2024, 7, 27, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            Approver = "John Doe",
                            DaysAbsent = 2.0m,
                            EmployeeId = 9,
                            EndDate = new DateTime(2024, 7, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HalfDayType = "None",
                            IsHalfDay = false,
                            IsPaid = false,
                            Reason = "Travel",
                            StartDate = new DateTime(2024, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved"
                        },
                        new
                        {
                            AbsenceReportId = 10,
                            ApprovedDate = new DateTime(2024, 8, 9, 10, 45, 0, 0, DateTimeKind.Unspecified),
                            Approver = "Jane Smith",
                            DaysAbsent = 2.0m,
                            EmployeeId = 10,
                            EndDate = new DateTime(2024, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HalfDayType = "None",
                            IsHalfDay = false,
                            IsPaid = true,
                            Reason = "Training",
                            StartDate = new DateTime(2024, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved"
                        });
                });

            modelBuilder.Entity("Fanush.Entities.TimeAndAttendence.ClockInOut", b =>
                {
                    b.Property<int>("ClockInOutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClockInOutId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ClockInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ClockOutTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EarlyDepartureReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEarlyDeparture")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLateArrival")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOvertime")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWorkday")
                        .HasColumnType("bit");

                    b.Property<string>("LateArrivalReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OvertimeHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ClockInOutId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ClockInOuts");

                    b.HasData(
                        new
                        {
                            ClockInOutId = 1,
                            Action = "ClockIn",
                            ApprovedBy = "John Doe",
                            ClockInTime = new DateTime(2024, 8, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            ClockOutTime = new DateTime(2024, 8, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsLateArrival = false,
                            IsOvertime = false,
                            IsWorkday = true,
                            LateArrivalReason = "",
                            Location = "Office A",
                            Notes = "Normal day",
                            OvertimeHours = 0m,
                            Timestamp = new DateTime(2024, 8, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ClockInOutId = 2,
                            Action = "ClockIn",
                            ApprovedBy = "Jane Smith",
                            ClockInTime = new DateTime(2024, 8, 2, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            ClockOutTime = new DateTime(2024, 8, 2, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsLateArrival = true,
                            IsOvertime = true,
                            IsWorkday = true,
                            LateArrivalReason = "Traffic",
                            Location = "Office B",
                            Notes = "Late arrival due to traffic",
                            OvertimeHours = 0.5m,
                            Timestamp = new DateTime(2024, 8, 2, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ClockInOutId = 3,
                            Action = "ClockIn",
                            ApprovedBy = "Emily Johnson",
                            ClockInTime = new DateTime(2024, 8, 3, 7, 45, 0, 0, DateTimeKind.Unspecified),
                            ClockOutTime = new DateTime(2024, 8, 3, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsLateArrival = false,
                            IsOvertime = false,
                            IsWorkday = true,
                            LateArrivalReason = "",
                            Location = "Remote",
                            Notes = "Working from home",
                            OvertimeHours = 0m,
                            Timestamp = new DateTime(2024, 8, 3, 7, 45, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ClockInOutId = 4,
                            Action = "ClockIn",
                            ApprovedBy = "Michael Brown",
                            ClockInTime = new DateTime(2024, 8, 4, 8, 15, 0, 0, DateTimeKind.Unspecified),
                            ClockOutTime = new DateTime(2024, 8, 4, 17, 15, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsLateArrival = true,
                            IsOvertime = true,
                            IsWorkday = true,
                            LateArrivalReason = "Doctor's appointment",
                            Location = "Office C",
                            Notes = "Late due to doctor's appointment",
                            OvertimeHours = 0.25m,
                            Timestamp = new DateTime(2024, 8, 4, 8, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ClockInOutId = 5,
                            Action = "ClockIn",
                            ApprovedBy = "David Wilson",
                            ClockInTime = new DateTime(2024, 8, 5, 7, 55, 0, 0, DateTimeKind.Unspecified),
                            ClockOutTime = new DateTime(2024, 8, 5, 17, 5, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 5,
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsLateArrival = false,
                            IsOvertime = true,
                            IsWorkday = true,
                            LateArrivalReason = "",
                            Location = "Office A",
                            Notes = "Arrived early",
                            OvertimeHours = 0.17m,
                            Timestamp = new DateTime(2024, 8, 5, 7, 55, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ClockInOutId = 6,
                            Action = "ClockIn",
                            ApprovedBy = "John Doe",
                            ClockInTime = new DateTime(2024, 8, 6, 8, 5, 0, 0, DateTimeKind.Unspecified),
                            ClockOutTime = new DateTime(2024, 8, 6, 16, 5, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 6,
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsLateArrival = true,
                            IsOvertime = false,
                            IsWorkday = true,
                            LateArrivalReason = "Family emergency",
                            Location = "Remote",
                            Notes = "Late due to family emergency",
                            OvertimeHours = 0m,
                            Timestamp = new DateTime(2024, 8, 6, 8, 5, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ClockInOutId = 7,
                            Action = "ClockIn",
                            ApprovedBy = "Jane Smith",
                            ClockInTime = new DateTime(2024, 8, 7, 8, 10, 0, 0, DateTimeKind.Unspecified),
                            ClockOutTime = new DateTime(2024, 8, 7, 17, 10, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 7,
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsLateArrival = true,
                            IsOvertime = true,
                            IsWorkday = true,
                            LateArrivalReason = "Transport issues",
                            Location = "Office B",
                            Notes = "Slight delay due to transport issues",
                            OvertimeHours = 0.17m,
                            Timestamp = new DateTime(2024, 8, 7, 8, 10, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ClockInOutId = 8,
                            Action = "ClockIn",
                            ApprovedBy = "Emily Johnson",
                            ClockInTime = new DateTime(2024, 8, 8, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            ClockOutTime = new DateTime(2024, 8, 8, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 8,
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsLateArrival = false,
                            IsOvertime = false,
                            IsWorkday = true,
                            LateArrivalReason = "",
                            Location = "Office C",
                            Notes = "Normal clock-in",
                            OvertimeHours = 0m,
                            Timestamp = new DateTime(2024, 8, 8, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ClockInOutId = 9,
                            Action = "ClockIn",
                            ApprovedBy = "Michael Brown",
                            ClockInTime = new DateTime(2024, 8, 9, 7, 50, 0, 0, DateTimeKind.Unspecified),
                            ClockOutTime = new DateTime(2024, 8, 9, 16, 50, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 9,
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsLateArrival = false,
                            IsOvertime = true,
                            IsWorkday = true,
                            LateArrivalReason = "",
                            Location = "Remote",
                            Notes = "Early clock-in",
                            OvertimeHours = 0.17m,
                            Timestamp = new DateTime(2024, 8, 9, 7, 50, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ClockInOutId = 10,
                            Action = "ClockIn",
                            ApprovedBy = "David Wilson",
                            ClockInTime = new DateTime(2024, 8, 10, 8, 20, 0, 0, DateTimeKind.Unspecified),
                            ClockOutTime = new DateTime(2024, 8, 10, 17, 20, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 10,
                            IsActive = true,
                            IsEarlyDeparture = false,
                            IsLateArrival = true,
                            IsOvertime = true,
                            IsWorkday = true,
                            LateArrivalReason = "Personal reasons",
                            Location = "Office A",
                            Notes = "Late due to personal reasons",
                            OvertimeHours = 0.17m,
                            Timestamp = new DateTime(2024, 8, 10, 8, 20, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Fanush.Entities.TimeAndAttendence.Leave", b =>
                {
                    b.Property<int>("LeaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaveId"));

                    b.Property<string>("ApprovalComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Approver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaidLeave")
                        .HasColumnType("bit");

                    b.Property<string>("LeaveCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeaveType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("NumberOfDays")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("LeaveId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Leaves");

                    b.HasData(
                        new
                        {
                            LeaveId = 1,
                            ApprovalComments = "Take care",
                            ApprovalDate = new DateTime(2024, 7, 31, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Approver = "Jane Smith",
                            EmployeeId = 1,
                            EndDate = new DateTime(2024, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsPaidLeave = true,
                            LeaveCategory = "Sick Leave",
                            LeaveType = "Sick Leave",
                            NumberOfDays = 3.0m,
                            Reason = "Fever and cold",
                            RequestedBy = "John Doe",
                            StartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved"
                        },
                        new
                        {
                            LeaveId = 2,
                            ApprovalComments = "Enjoy your time",
                            ApprovalDate = new DateTime(2024, 7, 10, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Approver = "John Doe",
                            EmployeeId = 2,
                            EndDate = new DateTime(2024, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsPaidLeave = true,
                            LeaveCategory = "Vacation Leave",
                            LeaveType = "Vacation",
                            NumberOfDays = 6.0m,
                            Reason = "Family vacation",
                            RequestedBy = "Jane Smith",
                            StartDate = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved"
                        },
                        new
                        {
                            LeaveId = 3,
                            ApprovalComments = "Pending approval",
                            ApprovalDate = new DateTime(2024, 8, 20, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Approver = "Jane Smith",
                            EmployeeId = 3,
                            EndDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            IsPaidLeave = true,
                            LeaveCategory = "Maternity Leave",
                            LeaveType = "Maternity Leave",
                            NumberOfDays = 9.0m,
                            Reason = "Maternity",
                            RequestedBy = "Emily Clark",
                            StartDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending"
                        },
                        new
                        {
                            LeaveId = 4,
                            ApprovalComments = "Condolences",
                            ApprovalDate = new DateTime(2024, 8, 8, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Approver = "John Doe",
                            EmployeeId = 4,
                            EndDate = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsPaidLeave = true,
                            LeaveCategory = "Bereavement Leave",
                            LeaveType = "Bereavement Leave",
                            NumberOfDays = 6.0m,
                            Reason = "Loss of family member",
                            RequestedBy = "Michael Brown",
                            StartDate = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved"
                        },
                        new
                        {
                            LeaveId = 5,
                            ApprovalComments = "Get well soon",
                            ApprovalDate = new DateTime(2024, 7, 24, 10, 15, 0, 0, DateTimeKind.Unspecified),
                            Approver = "Jane Smith",
                            EmployeeId = 5,
                            EndDate = new DateTime(2024, 7, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsPaidLeave = true,
                            LeaveCategory = "Sick Leave",
                            LeaveType = "Sick Leave",
                            NumberOfDays = 2.0m,
                            Reason = "Migraine",
                            RequestedBy = "Sarah Johnson",
                            StartDate = new DateTime(2024, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved"
                        },
                        new
                        {
                            LeaveId = 6,
                            ApprovalComments = "Safe travels",
                            ApprovalDate = new DateTime(2024, 8, 15, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Approver = "John Doe",
                            EmployeeId = 6,
                            EndDate = new DateTime(2024, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsPaidLeave = true,
                            LeaveCategory = "Vacation Leave",
                            LeaveType = "Vacation",
                            NumberOfDays = 6.0m,
                            Reason = "Holiday trip",
                            RequestedBy = "David Williams",
                            StartDate = new DateTime(2024, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved"
                        },
                        new
                        {
                            LeaveId = 7,
                            ApprovalComments = "Take rest",
                            ApprovalDate = new DateTime(2024, 7, 29, 14, 45, 0, 0, DateTimeKind.Unspecified),
                            Approver = "Jane Smith",
                            EmployeeId = 7,
                            EndDate = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsPaidLeave = true,
                            LeaveCategory = "Sick Leave",
                            LeaveType = "Sick Leave",
                            NumberOfDays = 2.0m,
                            Reason = "Back pain",
                            RequestedBy = "James White",
                            StartDate = new DateTime(2024, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved"
                        },
                        new
                        {
                            LeaveId = 8,
                            ApprovalComments = "Congrats!",
                            ApprovalDate = new DateTime(2024, 9, 3, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Approver = "John Doe",
                            EmployeeId = 8,
                            EndDate = new DateTime(2024, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsPaidLeave = true,
                            LeaveCategory = "Paternity Leave",
                            LeaveType = "Paternity Leave",
                            NumberOfDays = 15.0m,
                            Reason = "Newborn care",
                            RequestedBy = "Robert Green",
                            StartDate = new DateTime(2024, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved"
                        },
                        new
                        {
                            LeaveId = 9,
                            ApprovalComments = "Take care",
                            ApprovalDate = new DateTime(2024, 8, 1, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            Approver = "Jane Smith",
                            EmployeeId = 9,
                            EndDate = new DateTime(2024, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsPaidLeave = true,
                            LeaveCategory = "Sick Leave",
                            LeaveType = "Sick Leave",
                            NumberOfDays = 3.0m,
                            Reason = "Flu",
                            RequestedBy = "William Black",
                            StartDate = new DateTime(2024, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved"
                        },
                        new
                        {
                            LeaveId = 10,
                            ApprovalComments = "Enjoy your time off",
                            ApprovalDate = new DateTime(2024, 8, 20, 12, 15, 0, 0, DateTimeKind.Unspecified),
                            Approver = "John Doe",
                            EmployeeId = 10,
                            EndDate = new DateTime(2024, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsPaidLeave = true,
                            LeaveCategory = "Vacation Leave",
                            LeaveType = "Vacation",
                            NumberOfDays = 6.0m,
                            Reason = "Beach holiday",
                            RequestedBy = "Jessica King",
                            StartDate = new DateTime(2024, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Approved"
                        });
                });

            modelBuilder.Entity("Fanush.Entities.TimeAndAttendence.Overtime", b =>
                {
                    b.Property<int>("OvertimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OvertimeId"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachmentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Hours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OvertimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Project")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OvertimeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Overtimes");

                    b.HasData(
                        new
                        {
                            OvertimeId = 1,
                            ApprovalDate = new DateTime(2024, 8, 22, 10, 44, 28, 536, DateTimeKind.Local).AddTicks(9962),
                            ApprovalStatus = "Approved",
                            ApprovedBy = "Jane Smith",
                            AttachmentUrl = "http://example.com/attachment1",
                            CreatedBy = "John Doe",
                            CreatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 536, DateTimeKind.Local).AddTicks(9976),
                            Date = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "IT",
                            EmployeeId = 1,
                            Hours = 4.5m,
                            IsActive = true,
                            LastModifiedBy = "John Doe",
                            LastModifiedDate = new DateTime(2024, 8, 22, 10, 44, 28, 536, DateTimeKind.Local).AddTicks(9977),
                            OvertimeType = "Voluntary",
                            Project = "Project A",
                            Reason = "Project deadline"
                        },
                        new
                        {
                            OvertimeId = 2,
                            ApprovalStatus = "Pending",
                            CreatedBy = "Alice Johnson",
                            CreatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 536, DateTimeKind.Local).AddTicks(9981),
                            Date = new DateTime(2024, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Finance",
                            EmployeeId = 2,
                            Hours = 3.0m,
                            IsActive = true,
                            LastModifiedBy = "Alice Johnson",
                            LastModifiedDate = new DateTime(2024, 8, 22, 10, 44, 28, 536, DateTimeKind.Local).AddTicks(9981),
                            OvertimeType = "Mandatory",
                            Project = "System Upgrade",
                            Reason = "System update"
                        },
                        new
                        {
                            OvertimeId = 3,
                            ApprovalDate = new DateTime(2024, 8, 22, 10, 44, 28, 536, DateTimeKind.Local).AddTicks(9984),
                            ApprovalStatus = "Approved",
                            ApprovedBy = "Michael Brown",
                            AttachmentUrl = "http://example.com/attachment2",
                            CreatedBy = "Emily Davis",
                            CreatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 536, DateTimeKind.Local).AddTicks(9985),
                            Date = new DateTime(2024, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Support",
                            EmployeeId = 3,
                            Hours = 2.0m,
                            IsActive = true,
                            LastModifiedBy = "Emily Davis",
                            LastModifiedDate = new DateTime(2024, 8, 22, 10, 44, 28, 536, DateTimeKind.Local).AddTicks(9985),
                            OvertimeType = "Voluntary",
                            Project = "Customer A",
                            Reason = "Customer support"
                        },
                        new
                        {
                            OvertimeId = 4,
                            ApprovalDate = new DateTime(2024, 8, 22, 10, 44, 28, 536, DateTimeKind.Local).AddTicks(9988),
                            ApprovalStatus = "Approved",
                            ApprovedBy = "Sarah Johnson",
                            AttachmentUrl = "http://example.com/attachment3",
                            CreatedBy = "David Wilson",
                            CreatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 536, DateTimeKind.Local).AddTicks(9989),
                            Date = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Marketing",
                            EmployeeId = 4,
                            Hours = 5.0m,
                            IsActive = true,
                            LastModifiedBy = "David Wilson",
                            LastModifiedDate = new DateTime(2024, 8, 22, 10, 44, 28, 536, DateTimeKind.Local).AddTicks(9990),
                            OvertimeType = "Mandatory",
                            Project = "Launch X",
                            Reason = "Product launch"
                        },
                        new
                        {
                            OvertimeId = 5,
                            ApprovalStatus = "Rejected",
                            CreatedBy = "Jessica Lee",
                            CreatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 536, DateTimeKind.Local).AddTicks(9992),
                            Date = new DateTime(2024, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "HR",
                            EmployeeId = 5,
                            Hours = 6.0m,
                            IsActive = true,
                            LastModifiedBy = "Jessica Lee",
                            LastModifiedDate = new DateTime(2024, 8, 22, 10, 44, 28, 536, DateTimeKind.Local).AddTicks(9993),
                            OvertimeType = "Voluntary",
                            Project = "Training Session",
                            Reason = "Training preparation"
                        },
                        new
                        {
                            OvertimeId = 6,
                            ApprovalDate = new DateTime(2024, 8, 22, 10, 44, 28, 536, DateTimeKind.Local).AddTicks(9995),
                            ApprovalStatus = "Approved",
                            ApprovedBy = "Robert Brown",
                            AttachmentUrl = "http://example.com/attachment4",
                            CreatedBy = "Mark Taylor",
                            CreatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 536, DateTimeKind.Local).AddTicks(9996),
                            Date = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Sales",
                            EmployeeId = 6,
                            Hours = 4.0m,
                            IsActive = true,
                            LastModifiedBy = "Mark Taylor",
                            LastModifiedDate = new DateTime(2024, 8, 22, 10, 44, 28, 536, DateTimeKind.Local).AddTicks(9997),
                            OvertimeType = "Voluntary",
                            Project = "Meeting Y",
                            Reason = "Client meeting"
                        },
                        new
                        {
                            OvertimeId = 7,
                            ApprovalStatus = "Pending",
                            CreatedBy = "Anna Scott",
                            CreatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local),
                            Date = new DateTime(2024, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Audit",
                            EmployeeId = 7,
                            Hours = 2.5m,
                            IsActive = true,
                            LastModifiedBy = "Anna Scott",
                            LastModifiedDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(1),
                            OvertimeType = "Mandatory",
                            Project = "Audit Z",
                            Reason = "Audit preparation"
                        },
                        new
                        {
                            OvertimeId = 8,
                            ApprovalDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(3),
                            ApprovalStatus = "Approved",
                            ApprovedBy = "Olivia White",
                            AttachmentUrl = "http://example.com/attachment5",
                            CreatedBy = "John Martin",
                            CreatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(4),
                            Date = new DateTime(2024, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Operations",
                            EmployeeId = 8,
                            Hours = 3.5m,
                            IsActive = true,
                            LastModifiedBy = "John Martin",
                            LastModifiedDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(5),
                            OvertimeType = "Voluntary",
                            Project = "Task A",
                            Reason = "Additional tasks"
                        },
                        new
                        {
                            OvertimeId = 9,
                            ApprovalDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(7),
                            ApprovalStatus = "Approved",
                            ApprovedBy = "James Miller",
                            AttachmentUrl = "http://example.com/attachment6",
                            CreatedBy = "Laura Clark",
                            CreatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(8),
                            Date = new DateTime(2024, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Emergency",
                            EmployeeId = 9,
                            Hours = 5.0m,
                            IsActive = true,
                            LastModifiedBy = "Laura Clark",
                            LastModifiedDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(9),
                            OvertimeType = "Mandatory",
                            Project = "Response X",
                            Reason = "Emergency response"
                        },
                        new
                        {
                            OvertimeId = 10,
                            ApprovalDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(11),
                            ApprovalStatus = "Approved",
                            ApprovedBy = "Daniel Moore",
                            AttachmentUrl = "http://example.com/attachment7",
                            CreatedBy = "Sophia Walker",
                            CreatedDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(12),
                            Date = new DateTime(2024, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Customer Service",
                            EmployeeId = 10,
                            Hours = 4.5m,
                            IsActive = true,
                            LastModifiedBy = "Sophia Walker",
                            LastModifiedDate = new DateTime(2024, 8, 22, 10, 44, 28, 537, DateTimeKind.Local).AddTicks(13),
                            OvertimeType = "Voluntary",
                            Project = "Support B",
                            Reason = "Extra support"
                        });
                });

            modelBuilder.Entity("Fanush.Entities.TimeAndAttendence.PayrollIntegration", b =>
                {
                    b.Property<int>("PayrollIntegrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayrollIntegrationId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Deductions")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("GrossPay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("IntegrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IntegrationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("NetPay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PayFrequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PayPeriodEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PayPeriodStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PayrollSystemId")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PayrollIntegrationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PayrollIntegrations");

                    b.HasData(
                        new
                        {
                            PayrollIntegrationId = 1,
                            Amount = 2500.00m,
                            Deductions = 150.00m,
                            EmployeeId = 1,
                            GrossPay = 2550.00m,
                            IntegrationDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IntegrationType = "Regular",
                            IsActive = true,
                            NetPay = 2350.00m,
                            PayFrequency = "Monthly",
                            PayPeriodEndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayPeriodStartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayrollSystemId = 101,
                            TaxAmount = 200.00m,
                            TransactionId = "TX12345"
                        },
                        new
                        {
                            PayrollIntegrationId = 2,
                            Amount = 3000.00m,
                            Deductions = 200.00m,
                            EmployeeId = 2,
                            GrossPay = 3050.00m,
                            IntegrationDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IntegrationType = "Regular",
                            IsActive = true,
                            NetPay = 2800.00m,
                            PayFrequency = "Monthly",
                            PayPeriodEndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayPeriodStartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayrollSystemId = 102,
                            TaxAmount = 250.00m,
                            TransactionId = "TX12346"
                        },
                        new
                        {
                            PayrollIntegrationId = 3,
                            Amount = 2700.00m,
                            Deductions = 180.00m,
                            EmployeeId = 3,
                            GrossPay = 2740.00m,
                            IntegrationDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IntegrationType = "Regular",
                            IsActive = true,
                            NetPay = 2520.00m,
                            PayFrequency = "Monthly",
                            PayPeriodEndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayPeriodStartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayrollSystemId = 103,
                            TaxAmount = 220.00m,
                            TransactionId = "TX12347"
                        },
                        new
                        {
                            PayrollIntegrationId = 4,
                            Amount = 2900.00m,
                            Deductions = 210.00m,
                            EmployeeId = 4,
                            GrossPay = 2920.00m,
                            IntegrationDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IntegrationType = "Regular",
                            IsActive = true,
                            NetPay = 2690.00m,
                            PayFrequency = "Monthly",
                            PayPeriodEndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayPeriodStartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayrollSystemId = 104,
                            TaxAmount = 230.00m,
                            TransactionId = "TX12348"
                        },
                        new
                        {
                            PayrollIntegrationId = 5,
                            Amount = 3200.00m,
                            Deductions = 230.00m,
                            EmployeeId = 5,
                            GrossPay = 3240.00m,
                            IntegrationDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IntegrationType = "Regular",
                            IsActive = true,
                            NetPay = 2970.00m,
                            PayFrequency = "Monthly",
                            PayPeriodEndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayPeriodStartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayrollSystemId = 105,
                            TaxAmount = 270.00m,
                            TransactionId = "TX12349"
                        },
                        new
                        {
                            PayrollIntegrationId = 6,
                            Amount = 3100.00m,
                            Deductions = 220.00m,
                            EmployeeId = 6,
                            GrossPay = 3140.00m,
                            IntegrationDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IntegrationType = "Regular",
                            IsActive = true,
                            NetPay = 2880.00m,
                            PayFrequency = "Monthly",
                            PayPeriodEndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayPeriodStartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayrollSystemId = 106,
                            TaxAmount = 260.00m,
                            TransactionId = "TX12350"
                        },
                        new
                        {
                            PayrollIntegrationId = 7,
                            Amount = 2800.00m,
                            Deductions = 190.00m,
                            EmployeeId = 7,
                            GrossPay = 2850.00m,
                            IntegrationDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IntegrationType = "Regular",
                            IsActive = true,
                            NetPay = 2610.00m,
                            PayFrequency = "Monthly",
                            PayPeriodEndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayPeriodStartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayrollSystemId = 107,
                            TaxAmount = 240.00m,
                            TransactionId = "TX12351"
                        },
                        new
                        {
                            PayrollIntegrationId = 8,
                            Amount = 3300.00m,
                            Deductions = 240.00m,
                            EmployeeId = 8,
                            GrossPay = 3340.00m,
                            IntegrationDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IntegrationType = "Regular",
                            IsActive = true,
                            NetPay = 3060.00m,
                            PayFrequency = "Monthly",
                            PayPeriodEndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayPeriodStartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayrollSystemId = 108,
                            TaxAmount = 280.00m,
                            TransactionId = "TX12352"
                        },
                        new
                        {
                            PayrollIntegrationId = 9,
                            Amount = 3500.00m,
                            Deductions = 250.00m,
                            EmployeeId = 9,
                            GrossPay = 3550.00m,
                            IntegrationDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IntegrationType = "Regular",
                            IsActive = true,
                            NetPay = 3250.00m,
                            PayFrequency = "Monthly",
                            PayPeriodEndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayPeriodStartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayrollSystemId = 109,
                            TaxAmount = 290.00m,
                            TransactionId = "TX12353"
                        },
                        new
                        {
                            PayrollIntegrationId = 10,
                            Amount = 3400.00m,
                            Deductions = 230.00m,
                            EmployeeId = 10,
                            GrossPay = 3440.00m,
                            IntegrationDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IntegrationType = "Regular",
                            IsActive = true,
                            NetPay = 3170.00m,
                            PayFrequency = "Monthly",
                            PayPeriodEndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayPeriodStartDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PayrollSystemId = 110,
                            TaxAmount = 270.00m,
                            TransactionId = "TX12354"
                        });
                });

            modelBuilder.Entity("Fanush.Models.EmployeeManagement.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentName = "Engineering",
                            IsActive = true
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentName = "Human Resources",
                            IsActive = true
                        },
                        new
                        {
                            DepartmentId = 3,
                            DepartmentName = "Marketing",
                            IsActive = true
                        },
                        new
                        {
                            DepartmentId = 4,
                            DepartmentName = "Finance",
                            IsActive = true
                        },
                        new
                        {
                            DepartmentId = 5,
                            DepartmentName = "Operations",
                            IsActive = true
                        },
                        new
                        {
                            DepartmentId = 6,
                            DepartmentName = "IT",
                            IsActive = true
                        },
                        new
                        {
                            DepartmentId = 7,
                            DepartmentName = "Sales",
                            IsActive = true
                        },
                        new
                        {
                            DepartmentId = 8,
                            DepartmentName = "Customer Service",
                            IsActive = true
                        },
                        new
                        {
                            DepartmentId = 9,
                            DepartmentName = "Research & Development",
                            IsActive = true
                        },
                        new
                        {
                            DepartmentId = 10,
                            DepartmentName = "Legal",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Fanush.Models.EmployeeManagement.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("BloodGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfJoining")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FathersName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MothersName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresentAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobTitleId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            BloodGroup = "O+",
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9451),
                            DateOfBirth = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfJoining = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            Email = "amit.roy@example.com",
                            EmergencyContactNumber = "01823456789",
                            FathersName = "Shankar Roy",
                            FirstName = "Amit",
                            Gender = "Male",
                            ImagePath = "/images/amitroy.jpg",
                            IsActive = true,
                            JobTitleId = 1,
                            LastName = "Roy",
                            MaritalStatus = "Single",
                            MothersName = "Mina Roy",
                            NationalId = "123456789012",
                            Nationality = "Bangladeshi",
                            PassportNumber = "A1234567",
                            PermanentAddress = "456 River Road, Chattogram",
                            PhoneNumber = "01712345678",
                            PresentAddress = "123 Lake Road, Dhaka",
                            Religion = "Hindu",
                            UpdatedBy = "admin",
                            UpdatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9453)
                        },
                        new
                        {
                            EmployeeId = 2,
                            BloodGroup = "A+",
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9462),
                            DateOfBirth = new DateTime(1985, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfJoining = new DateTime(2019, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            Email = "rina.chakraborty@example.com",
                            EmergencyContactNumber = "01834567890",
                            FathersName = "Kumar Chakraborty",
                            FirstName = "Rina",
                            Gender = "Female",
                            ImagePath = "/images/rinachakraborty.jpg",
                            IsActive = true,
                            JobTitleId = 2,
                            LastName = "Chakraborty",
                            MaritalStatus = "Married",
                            MothersName = "Soma Chakraborty",
                            NationalId = "234567890123",
                            Nationality = "Bangladeshi",
                            PassportNumber = "B2345678",
                            PermanentAddress = "1012 Beach Road, Sylhet",
                            PhoneNumber = "01787654321",
                            PresentAddress = "789 Hill Street, Dhaka",
                            Religion = "Hindu",
                            UpdatedBy = "admin",
                            UpdatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9463)
                        },
                        new
                        {
                            EmployeeId = 3,
                            BloodGroup = "B+",
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9470),
                            DateOfBirth = new DateTime(1988, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfJoining = new DateTime(2018, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            Email = "sanjay.ghosh@example.com",
                            EmergencyContactNumber = "01845678901",
                            FathersName = "Suresh Ghosh",
                            FirstName = "Sanjay",
                            Gender = "Male",
                            ImagePath = "/images/sanjayghosh.jpg",
                            IsActive = true,
                            JobTitleId = 3,
                            LastName = "Ghosh",
                            MaritalStatus = "Single",
                            MothersName = "Anita Ghosh",
                            NationalId = "345678901234",
                            Nationality = "Bangladeshi",
                            PassportNumber = "C3456789",
                            PermanentAddress = "456 Blue Lane, Bogura",
                            PhoneNumber = "01798765432",
                            PresentAddress = "123 Green Lane, Dhaka",
                            Religion = "Hindu",
                            UpdatedBy = "admin",
                            UpdatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9470)
                        },
                        new
                        {
                            EmployeeId = 4,
                            BloodGroup = "AB+",
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9476),
                            DateOfBirth = new DateTime(1992, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfJoining = new DateTime(2021, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 4,
                            Email = "mina.das@example.com",
                            EmergencyContactNumber = "01856789012",
                            FathersName = "Ramesh Das",
                            FirstName = "Mina",
                            Gender = "Female",
                            ImagePath = "/images/minadas.jpg",
                            IsActive = true,
                            JobTitleId = 4,
                            LastName = "Das",
                            MaritalStatus = "Divorced",
                            MothersName = "Gita Das",
                            NationalId = "456789012345",
                            Nationality = "Bangladeshi",
                            PassportNumber = "D4567890",
                            PermanentAddress = "654 Park Avenue, Khulna",
                            PhoneNumber = "01745678901",
                            PresentAddress = "321 Market Street, Dhaka",
                            Religion = "Hindu",
                            UpdatedBy = "admin",
                            UpdatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9476)
                        },
                        new
                        {
                            EmployeeId = 5,
                            BloodGroup = "O-",
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9556),
                            DateOfBirth = new DateTime(1987, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfJoining = new DateTime(2022, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 5,
                            Email = "arif.hossain@example.com",
                            EmergencyContactNumber = "01867890123",
                            FathersName = "Mohammad Hossain",
                            FirstName = "Arif",
                            Gender = "Male",
                            ImagePath = "/images/arifhossain.jpg",
                            IsActive = true,
                            JobTitleId = 5,
                            LastName = "Hossain",
                            MaritalStatus = "Married",
                            MothersName = "Fatema Hossain",
                            NationalId = "567890123456",
                            Nationality = "Bangladeshi",
                            PassportNumber = "E5678901",
                            PermanentAddress = "1012 Central Road, Rajshahi",
                            PhoneNumber = "01712349876",
                            PresentAddress = "789 Hill Top, Dhaka",
                            Religion = "Muslim",
                            UpdatedBy = "admin",
                            UpdatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9556)
                        },
                        new
                        {
                            EmployeeId = 6,
                            BloodGroup = "AB-",
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9563),
                            DateOfBirth = new DateTime(1995, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfJoining = new DateTime(2023, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 6,
                            Email = "jaya.mukherjee@example.com",
                            EmergencyContactNumber = "01878901234",
                            FathersName = "Dipak Mukherjee",
                            FirstName = "Jaya",
                            Gender = "Female",
                            ImagePath = "/images/jayamukherjee.jpg",
                            IsActive = true,
                            JobTitleId = 6,
                            LastName = "Mukherjee",
                            MaritalStatus = "Single",
                            MothersName = "Kakoli Mukherjee",
                            NationalId = "678901234567",
                            Nationality = "Bangladeshi",
                            PassportNumber = "F6789012",
                            PermanentAddress = "789 Maple Avenue, Moulvibazar",
                            PhoneNumber = "01734567890",
                            PresentAddress = "456 Oak Street, Dhaka",
                            Religion = "Hindu",
                            UpdatedBy = "admin",
                            UpdatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9563)
                        },
                        new
                        {
                            EmployeeId = 7,
                            BloodGroup = "B-",
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9569),
                            DateOfBirth = new DateTime(1989, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfJoining = new DateTime(2020, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 7,
                            Email = "rafig.khan@example.com",
                            EmergencyContactNumber = "01889012345",
                            FathersName = "Aziz Khan",
                            FirstName = "Rafiq",
                            Gender = "Male",
                            ImagePath = "/images/rafiqukhan.jpg",
                            IsActive = true,
                            JobTitleId = 7,
                            LastName = "Khan",
                            MaritalStatus = "Widowed",
                            MothersName = "Amina Khan",
                            NationalId = "789012345678",
                            Nationality = "Bangladeshi",
                            PassportNumber = "G7890123",
                            PermanentAddress = "202 Cedar Road, Barishal",
                            PhoneNumber = "01765432109",
                            PresentAddress = "101 Pine Lane, Dhaka",
                            Religion = "Muslim",
                            UpdatedBy = "admin",
                            UpdatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9570)
                        },
                        new
                        {
                            EmployeeId = 8,
                            BloodGroup = "A-",
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9576),
                            DateOfBirth = new DateTime(1991, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfJoining = new DateTime(2019, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 8,
                            Email = "sonali.saha@example.com",
                            EmergencyContactNumber = "01890123456",
                            FathersName = "Babul Saha",
                            FirstName = "Sonali",
                            Gender = "Female",
                            ImagePath = "/images/sonalisaha.jpg",
                            IsActive = true,
                            JobTitleId = 8,
                            LastName = "Saha",
                            MaritalStatus = "Married",
                            MothersName = "Rina Saha",
                            NationalId = "890123456789",
                            Nationality = "Bangladeshi",
                            PassportNumber = "H8901234",
                            PermanentAddress = "345 Pine Avenue, Sylhet",
                            PhoneNumber = "01723456789",
                            PresentAddress = "234 Maple Street, Dhaka",
                            Religion = "Hindu",
                            UpdatedBy = "admin",
                            UpdatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9576)
                        },
                        new
                        {
                            EmployeeId = 9,
                            BloodGroup = "O+",
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9582),
                            DateOfBirth = new DateTime(1984, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfJoining = new DateTime(2018, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 9,
                            Email = "imran.ahmed@example.com",
                            EmergencyContactNumber = "01891234567",
                            FathersName = "Mohammad Ahmed",
                            FirstName = "Imran",
                            Gender = "Male",
                            ImagePath = "/images/imranahmed.jpg",
                            IsActive = true,
                            JobTitleId = 9,
                            LastName = "Ahmed",
                            MaritalStatus = "Single",
                            MothersName = "Nasima Ahmed",
                            NationalId = "901234567890",
                            Nationality = "Bangladeshi",
                            PassportNumber = "I9012345",
                            PermanentAddress = "678 Elm Street, Rangpur",
                            PhoneNumber = "01756789012",
                            PresentAddress = "567 Birch Lane, Dhaka",
                            Religion = "Muslim",
                            UpdatedBy = "admin",
                            UpdatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9582)
                        },
                        new
                        {
                            EmployeeId = 10,
                            BloodGroup = "AB+",
                            CreatedBy = "admin",
                            CreatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9588),
                            DateOfBirth = new DateTime(1993, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfJoining = new DateTime(2022, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 10,
                            Email = "anita.bhattacharya@example.com",
                            EmergencyContactNumber = "01893456789",
                            FathersName = "Pranab Bhattacharya",
                            FirstName = "Anita",
                            Gender = "Female",
                            ImagePath = "/images/anitabhattacharya.jpg",
                            IsActive = true,
                            JobTitleId = 10,
                            LastName = "Bhattacharya",
                            MaritalStatus = "Married",
                            MothersName = "Chitra Bhattacharya",
                            NationalId = "012345678901",
                            Nationality = "Bangladeshi",
                            PassportNumber = "J0123456",
                            PermanentAddress = "123 Oak Road, Comilla",
                            PhoneNumber = "01767890123",
                            PresentAddress = "890 Walnut Street, Dhaka",
                            Religion = "Hindu",
                            UpdatedBy = "admin",
                            UpdatedOn = new DateTime(2024, 8, 22, 4, 44, 28, 536, DateTimeKind.Utc).AddTicks(9588)
                        });
                });

            modelBuilder.Entity("Fanush.Models.EmployeeManagement.EmployeeDataImportExport", b =>
                {
                    b.Property<int>("ImportExportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImportExportId"));

                    b.Property<string>("DataPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ImportExportDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImportExportId");

                    b.ToTable("EmployeeDataImportExports");

                    b.HasData(
                        new
                        {
                            ImportExportId = 1,
                            DataPath = "/data/imports/employee_data_2023.csv",
                            ImportExportDate = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Type = "Import"
                        },
                        new
                        {
                            ImportExportId = 2,
                            DataPath = "/data/exports/employee_data_2023.xlsx",
                            ImportExportDate = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Type = "Export"
                        },
                        new
                        {
                            ImportExportId = 3,
                            DataPath = "/data/imports/employee_data_2023_part2.csv",
                            ImportExportDate = new DateTime(2023, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Type = "Import"
                        },
                        new
                        {
                            ImportExportId = 4,
                            DataPath = "/data/exports/employee_data_backup_2023.csv",
                            ImportExportDate = new DateTime(2023, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Type = "Export"
                        },
                        new
                        {
                            ImportExportId = 5,
                            DataPath = "/data/imports/employee_data_new_records.csv",
                            ImportExportDate = new DateTime(2023, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Type = "Import"
                        },
                        new
                        {
                            ImportExportId = 6,
                            DataPath = "/data/exports/employee_data_summary_2023.xlsx",
                            ImportExportDate = new DateTime(2023, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Type = "Export"
                        },
                        new
                        {
                            ImportExportId = 7,
                            DataPath = "/data/imports/employee_attendance_data_2023.csv",
                            ImportExportDate = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Type = "Import"
                        },
                        new
                        {
                            ImportExportId = 8,
                            DataPath = "/data/exports/employee_performance_data_2023.xlsx",
                            ImportExportDate = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Type = "Export"
                        },
                        new
                        {
                            ImportExportId = 9,
                            DataPath = "/data/imports/employee_salary_data_2023.csv",
                            ImportExportDate = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Type = "Import"
                        },
                        new
                        {
                            ImportExportId = 10,
                            DataPath = "/data/exports/employee_data_full_2023.xlsx",
                            ImportExportDate = new DateTime(2024, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Type = "Export"
                        });
                });

            modelBuilder.Entity("Fanush.Models.EmployeeManagement.EmployeeLifecycle", b =>
                {
                    b.Property<int>("LifecycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LifecycleId"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("LifecycleId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeLifecycles");

                    b.HasData(
                        new
                        {
                            LifecycleId = 1,
                            ActionDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionType = "Onboarding",
                            EmployeeId = 1,
                            IsActive = true
                        },
                        new
                        {
                            LifecycleId = 2,
                            ActionDate = new DateTime(2015, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionType = "Onboarding",
                            EmployeeId = 2,
                            IsActive = true
                        },
                        new
                        {
                            LifecycleId = 3,
                            ActionDate = new DateTime(2008, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionType = "Onboarding",
                            EmployeeId = 3,
                            IsActive = true
                        },
                        new
                        {
                            LifecycleId = 4,
                            ActionDate = new DateTime(2019, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionType = "Onboarding",
                            EmployeeId = 4,
                            IsActive = true
                        },
                        new
                        {
                            LifecycleId = 5,
                            ActionDate = new DateTime(2012, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionType = "Onboarding",
                            EmployeeId = 5,
                            IsActive = true
                        },
                        new
                        {
                            LifecycleId = 6,
                            ActionDate = new DateTime(2016, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionType = "Onboarding",
                            EmployeeId = 6,
                            IsActive = true
                        },
                        new
                        {
                            LifecycleId = 7,
                            ActionDate = new DateTime(2005, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionType = "Onboarding",
                            EmployeeId = 7,
                            IsActive = true
                        },
                        new
                        {
                            LifecycleId = 8,
                            ActionDate = new DateTime(2020, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionType = "Onboarding",
                            EmployeeId = 8,
                            IsActive = true
                        },
                        new
                        {
                            LifecycleId = 9,
                            ActionDate = new DateTime(2018, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionType = "Onboarding",
                            EmployeeId = 9,
                            IsActive = true
                        },
                        new
                        {
                            LifecycleId = 10,
                            ActionDate = new DateTime(2013, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ActionType = "Onboarding",
                            EmployeeId = 10,
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Fanush.Models.EmployeeManagement.JobTitle", b =>
                {
                    b.Property<int>("JobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobTitleId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobTitleId");

                    b.ToTable("JobTitles");

                    b.HasData(
                        new
                        {
                            JobTitleId = 1,
                            IsActive = true,
                            JobTitleName = "Software Engineer"
                        },
                        new
                        {
                            JobTitleId = 2,
                            IsActive = true,
                            JobTitleName = "HR Manager"
                        },
                        new
                        {
                            JobTitleId = 3,
                            IsActive = true,
                            JobTitleName = "Quality Assurance Analyst"
                        },
                        new
                        {
                            JobTitleId = 4,
                            IsActive = true,
                            JobTitleName = "Marketing Specialist"
                        },
                        new
                        {
                            JobTitleId = 5,
                            IsActive = true,
                            JobTitleName = "Finance Manager"
                        },
                        new
                        {
                            JobTitleId = 6,
                            IsActive = true,
                            JobTitleName = "Operations Coordinator"
                        },
                        new
                        {
                            JobTitleId = 7,
                            IsActive = true,
                            JobTitleName = "IT Support Specialist"
                        },
                        new
                        {
                            JobTitleId = 8,
                            IsActive = true,
                            JobTitleName = "Sales Representative"
                        },
                        new
                        {
                            JobTitleId = 9,
                            IsActive = true,
                            JobTitleName = "Customer Service Representative"
                        },
                        new
                        {
                            JobTitleId = 10,
                            IsActive = true,
                            JobTitleName = "Project Manager"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Fanush.Entities.PayrollManagement.PayrollCalculation", b =>
                {
                    b.HasOne("Fanush.Models.EmployeeManagement.Employee", "Employee")
                        .WithMany("PayrollCalculations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Fanush.Entities.PerformenceManagement.DevelopmentPlan", b =>
                {
                    b.HasOne("Fanush.Models.EmployeeManagement.Employee", "Employee")
                        .WithMany("DevelopmentPlans")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Fanush.Entities.PerformenceManagement.Goal", b =>
                {
                    b.HasOne("Fanush.Models.EmployeeManagement.Employee", "Employee")
                        .WithMany("Goals")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Fanush.Entities.PerformenceManagement.PerformanceReport", b =>
                {
                    b.HasOne("Fanush.Models.EmployeeManagement.Employee", "Employee")
                        .WithMany("PerformanceReports")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Fanush.Entities.PerformenceManagement.PerformanceReview", b =>
                {
                    b.HasOne("Fanush.Models.EmployeeManagement.Employee", "Employee")
                        .WithMany("PerformanceReviews")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Fanush.Entities.RecruitmentManagement.Education", b =>
                {
                    b.HasOne("Fanush.Entities.RecruitmentManagement.Applicant", "Applicant")
                        .WithMany("Educations")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("Fanush.Entities.RecruitmentManagement.Interview", b =>
                {
                    b.HasOne("Fanush.Entities.RecruitmentManagement.Applicant", "Applicant")
                        .WithMany("Interviews")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("Fanush.Entities.RecruitmentManagement.WorkExperience", b =>
                {
                    b.HasOne("Fanush.Entities.RecruitmentManagement.Applicant", "Applicant")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("Fanush.Entities.TimeAndAttendence.AbsenceReport", b =>
                {
                    b.HasOne("Fanush.Models.EmployeeManagement.Employee", "Employee")
                        .WithMany("AbsenceReports")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Fanush.Entities.TimeAndAttendence.ClockInOut", b =>
                {
                    b.HasOne("Fanush.Models.EmployeeManagement.Employee", "Employee")
                        .WithMany("ClockInOuts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Fanush.Entities.TimeAndAttendence.Leave", b =>
                {
                    b.HasOne("Fanush.Models.EmployeeManagement.Employee", "Employee")
                        .WithMany("Leaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Fanush.Entities.TimeAndAttendence.Overtime", b =>
                {
                    b.HasOne("Fanush.Models.EmployeeManagement.Employee", "Employee")
                        .WithMany("Overtimes")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Fanush.Entities.TimeAndAttendence.PayrollIntegration", b =>
                {
                    b.HasOne("Fanush.Models.EmployeeManagement.Employee", null)
                        .WithMany("PayrollIntegrations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanush.Models.EmployeeManagement.Employee", b =>
                {
                    b.HasOne("Fanush.Models.EmployeeManagement.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fanush.Models.EmployeeManagement.JobTitle", "JobTitle")
                        .WithMany("Employee")
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("JobTitle");
                });

            modelBuilder.Entity("Fanush.Models.EmployeeManagement.EmployeeLifecycle", b =>
                {
                    b.HasOne("Fanush.Models.EmployeeManagement.Employee", "Employee")
                        .WithMany("EmployeeLifecycles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Fanush.Entities.Administrator.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Fanush.Entities.Administrator.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fanush.Entities.Administrator.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Fanush.Entities.Administrator.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fanush.Entities.RecruitmentManagement.Applicant", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Interviews");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("Fanush.Models.EmployeeManagement.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Fanush.Models.EmployeeManagement.Employee", b =>
                {
                    b.Navigation("AbsenceReports");

                    b.Navigation("ClockInOuts");

                    b.Navigation("DevelopmentPlans");

                    b.Navigation("EmployeeLifecycles");

                    b.Navigation("Goals");

                    b.Navigation("Leaves");

                    b.Navigation("Overtimes");

                    b.Navigation("PayrollCalculations");

                    b.Navigation("PayrollIntegrations");

                    b.Navigation("PerformanceReports");

                    b.Navigation("PerformanceReviews");
                });

            modelBuilder.Entity("Fanush.Models.EmployeeManagement.JobTitle", b =>
                {
                    b.Navigation("Employee");
                });
#pragma warning restore 612, 618
        }
    }
}
